Fundación

Comenzaremos nuestro marco al observar un código fundamental (enfocado por OOP) en el que se basarán los componentes básicos. Lo primero que veremos es cómo ejecutar código que se distribuye en varios archivos. También veremos qué hacer cuando nos encontramos con errores. Finalmente, crearemos un medio conveniente de clasificación y recuperación de metadatos de clase.

Metas
• Necesitamos desarrollar un medio para cargar clases automáticamente. Las clases deben ubicarse en función de sus nombres, y estos nombres deben traducirse en una jerarquía de carpetas.

• Necesitamos comprender y definir subclases de excepción personalizados, para que podamos manejar los tipos de errores más comunes que podrían ocurrir.

• También debemos definir un sistema de clases estáticas que incluyen métodos de utilidad para una serie de tipos de datos.

• También deberíamos desarrollar un medio para identificar la estructura (y el uso previsto) de nuestras clases marco que depende del uso de comentarios de códigos especiales.


Cariografía
"Carga automática"
Debido a que vamos a escribir un gran código, es seguro asumir que queremos estructurar claramente el código, para evitar la confusión a medida que aumenta la cantidad de código. Hay algunas formas en las que podríamos hacer esto, y uno de ellos está guardando trozos de código separados en archivos separados. Un problema que surge de este enfoque a la estructura del código es que tendremos que hacer referencia a estos trozos externos de código desde un solo punto de entrada. Las solicitudes a un servidor web tienden a enrutarse a un solo archivo en el directorio Webroot del servidor. Por ejemplo, los servidores web de Apache generalmente se configuran para enrutar las solicitudes predeterminadas a index.php. Podemos mantener todo nuestro código de marco en este único archivo, o podemos dividirlo en varios archivos y hacerlo desde Index.PHP. PHP proporciona cuatro declaraciones básicas para que incluyamos scripts externos dentro del flujo del programa. Estos se muestran en la listado 2-1.

Listado 2-1. Las cuatro funciones básicas requieren / incluyen.
include("events.php");
include_once("inflection.php");
require("flash.php");
require_once("twitter.php");


La primera declaración buscará eventos.PHP dentro de la ruta de inclusión de PHP, y si existe, PHP cargará el archivo. Si no puede encontrar el archivo, emitirá una advertencia. La segunda afirmación es la misma que la primera, excepto que solo intentará cargar la inflexión del archivo.FP una vez. Puede ejecutar la segunda declaración tantas veces como desee, pero el archivo solo se cargará la primera vez. La tercera declaración es la misma que la primera, excepto que PHP emitirá un error fatal (si no lo detuvo, detendrá la ejecución del script). La cuarta declaración es la misma que la segunda, excepto que también emitirá un error fatal si el archivo no se puede encontrar. Esto significa que la carga de las clases es suficiente a pequeña escala, pero tiene los siguientes inconvenientes:

• Siempre tendrá que requerir / incluir los archivos que contengan sus scripts antes de poder usarlos. Esto suena fácil al principio, pero en un sistema grande es en realidad un proceso bastante doloroso. Debe recordar el camino a cada guión y el momento adecuado para incluirlos.

• Si opta por incluir todos los scripts al mismo tiempo (generalmente en la parte superior de cada archivo), estarán en alcance durante todo el tiempo que se está ejecutando el script. Primero, se cargarán antes del script que los requiera, y se evalúen completamente antes de que pueda suceder cualquier otra cosa. Esto está bien a pequeña escala, pero puede disminuir rápidamente los tiempos de carga de su página.


Espacios de nombres
Una nueva adición particularmente útil para PHP 5.3.0 es espacios de nombres. Los espacios de nombres permiten a los desarrolladores sandbox su código, fuera del espacio de nombres global, para evitar conflictos de nombres de clase y ayudar a organizar mejor su código. Haremos el uso de espacios de nombres en casi todas las clases que escribimos, y no están particularmente difíciles de usar. Considere el ejemplo presentado en el listado 2-2.



Como mencioné anteriormente, los espacios de nombres ayudan a eliminar las clases del espacio de nombres global. El espacio de nombres se mantiene dentro del espacio de nombres global, por lo que debe permanecer único; Sin embargo, puede contener cualquier número de clases, lo que puede reutilizar los nombres de las clases que se encuentran en el espacio de nombres global, o dentro de otros espacios de nombres.

------------------------------------------------
■ ■ Nota: los espacios de nombres no son un requisito 
del patrón de diseño de MVC, pero ciertamente ayudan 
a evitar colisiones de nombres de clase y función. 
Algunos marcos populares de MVC (como Symphony) ya 
organizan sus clases en espacios de nombres.
------------------------------------------------


Carga lenta
Podemos usar los métodos requeridos / incluir para cargar nuestras clases, o podemos usar otro método PHP nos da: la función SPL_AUTOLOAD_REGEISTER (). Esta función incorporada nos permite proporcionar nuestro propio código, usar como medio para cargar una clase basada en el nombre de la clase solicitada. El patrón que usaremos para encontrar archivos de clase será el nombre de la clase de caso con un separador de directorios entre cada palabra y .php al final. Por lo tanto, si necesitamos cargar la clase Framework \ Database \ Driver \ MySQL, buscaremos el marco de archivos / base de datos / controlador / mysql.php (suponiendo que nuestra carpeta Marco esté en la ruta de inclusión de PHP). Consulte Listado 2-3 por ejemplo.


La primera llamada a SPL_AUTOOAD_REGISTER () le dice a PHP que use el método AutoLoad () para cargar un archivo de clase por nombre. La segunda convocatoria a SPL_AUTOOAD_REGISTER () le dice a PHP que use el método AutoAoader :: AutoLoad () para cargar un archivo de clase por nombre. La tercera y cuarta llamadas a SPL_AUTOUTOAD_REGISTER () le dicen a PHP que utilice el método de AutoLoad (), que pertenece a la clase en la que ocurran las llamadas SPL_AUTOOAD_REGISTER (), para cargar un archivo de clase por nombre. La función AutoLoad () Función primero divide la cadena devuelta de la función get_include_path () de PHP en directorios separados. Luego construye el nombre del archivo de destino dividiendo el nombre de la clase solicitada en la segunda, la tercera, la cuarta, y así sucesivamente, las letras mayúsculas y uniéndose las palabras juntas usando la constante Path_Separator. Si encuentra el archivo de destino dentro de cualquiera de los directorios de Rutas de $, incluirá la ejecución de la función de archivo y finalización con una declaración de retorno. Si el archivo no se encuentra al final del bucle, a través de $ rutas, se lanzará una excepción. Si no se tira ninguna excepción, puede asumir que se encontró un archivo que coincide con el nombre de la clase (en uno de los directorios en la ruta de inclusión) y se incluyó con éxito.

■ ■ Nota Si desea saber más sobre los espacios de nombres PHP, puede ver la documentación completa (y algunos ejemplos) en http://php.net/manual/en/language.namespaces.php.




------------

Bueno, hola, y bienvenido a esta capacitación, que está en PHP del intermedio hasta avanzado, soy David Connolly el desarrollador web Extraordinaire, he estado usando PHP comercialmente desde 2003, ejecuto un sitio llamado Speed Coding Academy, también soy el autor de un marco de PHP llamado TRON GATE Framework de todos modos, de todos modos, lo que he notado es que aquí en YouTube hace un phpTraining realmente fantástico y Hay muchas cosas que cubren las cosas para principiantes PHP, también hay mucho de bastante avanzado PHP, pero no hay mucho material que lleve a los desarrolladores de ese punto medio a la zona avanzada, eso es lo que vamos a cubrir aquí, creo que Hay una necesidad de este tipo de material y es hora de que alguien ponga algo que aborda esa brecha que creo que está ahí fuera en nuestra comunidad, así que aquí es lo que vendrá vendrán, vamos a empezar de que PHP la sintaxis ha cambiado a lo largo de los años, pero lo que es más importante, por lo que ha cambiado un poco de historia para que estés llenado por qué las cosas van a la forma en que vamos a cubrir a Pret. Ty muchos bloques de construcción del desarrollo de PHP, que son clases, por lo que para muchos de ustedes, esto será solo un recapitulación que sabrá crearlos extendiéndolos y así sucesivamente, pero luego pasaremos a los conceptos más avanzados como el uso de métodos estáticos de técnicas de carga avanzada y cosas así, así que vamos a cubrir cómo trazar un marco para que pueda analizar un marco como el marco de la puerta de Tron Gate o el encendedor de código o algo así, y sabrá cómo funciona así. Los archivos están conectados cómo funciona el enrutamiento. Incluso podrás hacer tu propio marco si así eres en lo que estás en la forma en que no estoy enseñando cómo hacer tu propio marco que tomaría hasta la próxima Navidad si está en eso Recomendaría dejarle darle su pequeña mención aquí, recomendaría este curso de uDemy si eres en serio acerca de construir tu propio marco, es de Brad Traverse y es un excelente curso de capacitación, solo pensé que mencionaría eso, pero voy a Muéstrales cómo cubrir El enrutamiento y yo, básicamente, voy a darle los bloques de construcción para que sea algo que entenderá y podrá configurar si lo desea, por cierto, hacer la plomería general y la arquitectura para un marco es Considerada la parte más difícil que podrás hacer eso al final de esta capacitación, entonces vamos a cubrir cómo interactuar con una base de datos utilizando PDO, todavía hay muchos desarrolladores. que no están claro esto, así que vamos a cubrir que va a ser un experto no se preocupe Entonces vamos a hablar de http peticiones y vamos a ir muy avanzado probablemente más avanzado que entrenamiento que has visto antes en esto tema Y eso también vamos a cubrir sesiones y cookies ahora eso es no un Tema avanzado pero creo que es un Tema esencial Y es algo que agregaremos. Solo para asegurarte de que tienes eso cubierto Luego un poco de controversia aquí. Voy a hablar de por qué PSR es el lo peor que haya pasado a php ahora eso es una opinión y usted es 100 bienvenido a estar en desacuerdo con esa opinión sin embargo es posible que desee retenerte y hacer el entrenamiento primero porque entonces Cuando lleguemos a ese punto, tú y yo podemos tener un muy informado y conversación inteligente sobre cosas así y quién sabe tal vez no estarás de acuerdo y Tal vez tengas razón, pero vamos a hablar de eso también Finalmente voy a terminar con un poco sobre el futuro de PHP y Donde me parece que PHP va a ir, es el Entrenando bienvenido a bordo y vamos a comenzar.